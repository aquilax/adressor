// Generated by CoffeeScript 1.6.1
(function() {

  window.Adr = window.Adr || {};

  window.Adr = {
    init: function() {
      var self;
      self = this;
      return chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        console.log(request);
        if (self[request.exec]) {
          return sendResponse(self[request.exec].apply(self, request.args));
        }
      });
    },
    getPositions: function(selector, callback) {
      var result;
      result = [];
      $(selector).each(function(index, ad) {
        var $ad;
        $ad = $(ad);
        result.push({
          id: $ad.attr('id'),
          height: $ad.height(),
          width: $ad.width(),
          html: $ad.html()
        });
        return true;
      });
      return result;
    },
    updatePositions: function(data, callback) {
      var self;
      self = this;
      $.each(data, function(index, ad) {
        return self.updateAd($('#' + ad.id), ad);
      });
      return 'done';
    },
    generateColor: function(r, g, b) {
      var c;
      c = 'rgb(' + (r % 255) + ',' + (g % 255) + ',' + (b % 255) + ')';
      console.log(c);
      return c;
    },
    generateImage: function(id, width, height, color) {
      var canvas, ctx;
      canvas = document.createElement('canvas');
      $(canvas).attr('width', width);
      $(canvas).attr('height', height);
      canvas.widht = width;
      canvas.height = height;
      ctx = canvas.getContext('2d');
      ctx.fillStyle = color || this.generateColor(width, 128, height);
      ctx.fillRect(0, 0, width, height);
      ctx.fillStyle = '#000';
      ctx.fillText(id, 2, 10);
      ctx.fillText(width + 'x' + height, 2, 22);
      return $('<img>').attr('src', canvas.toDataURL('image/png')).css({
        width: width + 'px',
        height: height + 'px'
      });
    },
    replaceHTML: function($el, ad) {
      if (ad.html === '[image]') {
        $el.html(this.generateImage(ad.id, parseInt(ad.width, 10), parseInt(ad.height, 10)));
      } else {
        $el.empty().html(ad.html);
      }
      return true;
    },
    updateAd: function($ad, ad) {
      var changed;
      changed = false;
      if ($ad.width() !== ad["with"]) {
        $ad.width(ad.width);
        changed = true;
      }
      if ($ad.height() !== ad.height) {
        $ad.height(ad.height);
        changed = true;
      }
      if ($ad.html() !== ad.html) {
        this.replaceHTML($ad, ad);
        changed = true;
      }
      if (changed) {
        $ad.css('overflow', 'hidden');
      }
      return true;
    },
    highlight: function(id) {
      var $el;
      $el = $('#' + id);
      $el.css('border', '3px solid #f00');
      setTimeout(function() {
        return $el.css('border', 'none');
      }, 500);
      return true;
    },
    ping: function() {
      return 'pong';
    }
  };

  $(function() {
    return Adr.init();
  });

}).call(this);
